generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model GolfCourse {
  id               Int                @id @default(autoincrement())
  name             String
  par              Int
  holes            Int
  city             String
  state            String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  GolfCourseReview GolfCourseReview[]
}

model User {
  id                  Int                   @id @default(autoincrement())
  clerkId             String                @unique
  email               String                @unique
  firstName           String
  lastName            String
  birthYear           Int?
  birthMonth          String?
  birthDay            Int?
  handicap            Float?
  gender              String?
  city                String
  state               String
  zipCode             Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GolfCourseReview    GolfCourseReview[]
  Post                Post[]
  PostComment         PostComment[]
  CountryClubCostPost CountryClubCostPost[]
  CountryClub         CountryClub[]
}

model GolfCourseReview {
  id        Int        @id @default(autoincrement())
  rating    Int
  review    String
  userId    Int
  courseId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    GolfCourse @relation(fields: [courseId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  file        String?
  content     String
  authorId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  PostComment PostComment[]
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model CountryClub {
  id                  Int                   @id @default(autoincrement())
  name                String
  address             String
  phoneNumber         String?
  city                String
  state               String
  files               File[]
  zipCode             Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  authorId            Int
  author              User                  @relation(fields: [authorId], references: [id])
  CountryClubCostPost CountryClubCostPost[]
}

model File {
  id            Int          @id @default(autoincrement())
  path          String
  CountryClub   CountryClub? @relation(fields: [countryClubId], references: [id])
  countryClubId Int?
}

model CountryClubCostPost {
  id            Int         @id @default(autoincrement())
  initiationFee Int
  monthlyDues   Int
  content       String
  clubId        Int
  authorId      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  author        User        @relation(fields: [authorId], references: [id])
  club          CountryClub @relation(fields: [clubId], references: [id])
}
